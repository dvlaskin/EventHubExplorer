@page "/Configuration"
@using Domain.Configs
@using Domain.Interfaces.Providers
@using Domain.Interfaces.Services

@inject IFileStorageProvider<AppConfiguration> ConfigurationProvider
@inject IMessageHistory<Guid, List<string>> MessagesHistoryService

@rendermode InteractiveServer

<PageTitle>Configuration</PageTitle>

<h1>Configuration</h1>


<!-- Add New Config -->
<button class="btn btn-primary mb-3" @onclick="AddNewConfig">Add Event Hub</button>

<!-- Save All Config -->
<button class="btn btn-success mb-3" @onclick="SaveConfiguration">Save Configuration</button>


@if (appConfiguration?.EventHubsConfigs.Count == 0)
{
    <p>No Event Hubs configured</p>
}
else
{
    <!-- Event Hubs configs -->
    <div class="accordion" id="eventHubAccordion">
        @for (var i = 0; i < appConfiguration?.EventHubsConfigs.Count; i++)
        {
            var index = i;
            var eventHub = appConfiguration.EventHubsConfigs[i];
            var isEmpty = string.IsNullOrWhiteSpace(eventHub.ConnectionString) || string.IsNullOrWhiteSpace(eventHub.Name);

            <div class="accordion-item">
                <h2 class="accordion-header" id="heading-@i">
                    <button class="accordion-button @(isEmpty ? "" : "collapsed") bg-secondary text-white" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapse-@i" aria-expanded="@(isEmpty ? "true" : "false")" aria-controls="collapse-@i">
                        @eventHub.Title
                    </button>
                </h2>
                <div id="collapse-@i" class="accordion-collapse collapse @(isEmpty ? "show" : "")" aria-labelledby="heading-@i"
                     data-bs-parent="#eventHubAccordion">
                    <div class="accordion-body">
                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <input class="form-control" @bind="eventHub.Title">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Connection String</label>
                            <input class="form-control" @bind="eventHub.ConnectionString">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">EventHub Name</label>
                            <input class="form-control" @bind="eventHub.Name">
                        </div>
                        <div class="mb-3">
                            <h6>Message encoding settings: </h6>
                            <div class="form-check d-inline-block me-3">
                                <input class="form-check-input" type="checkbox" @bind="eventHub.UseGzipCompression"
                                       @bind:after="@(() => OnGzipCompressionChanged(eventHub))">
                                <label class="form-check-label">Use Gzip Compression</label>
                            </div>
                            <div class="form-check d-inline-block">
                                <input class="form-check-input" type="checkbox" @bind="eventHub.UseBase64Coding"
                                       disabled="@(!eventHub.UseGzipCompression)">
                                <label class="form-check-label">Use Base64 Coding</label>
                            </div>
                        </div>
                        <div class="mb-3">
                            <h6>Message formatting settings: </h6>
                            @foreach (var formatter in eventHub.MessageFormatters)
                            {
                                <div class="form-check d-inline-block me-3">
                                    <label class="form-check-label">@formatter.Key</label>
                                    <input class="form-check-input" type="checkbox" 
                                           @bind:get="formatter.Value"
                                           @bind:set="(value) => eventHub.MessageFormatters[formatter.Key] = value">
                                </div>
                            }
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" @bind="eventHub.UseCheckpoints">
                            <label class="form-check-label">Use Checkpoints</label>
                        </div>

                        @if (eventHub.UseCheckpoints)
                        {
                            eventHub.StorageConfig ??= new BlobConfig { ConnectionString = "", BlobContainerName = "" };

                            <h5>Blob Storage</h5>
                            <div class="mb-3">
                                <label class="form-label">Connection String</label>
                                <input class="form-control" @bind="eventHub.StorageConfig.ConnectionString">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Container Name</label>
                                <input class="form-control" @bind="eventHub.StorageConfig.BlobContainerName">
                            </div>
                        }

                        <button class="btn btn-danger" @onclick="() => RemoveConfig(index)">Remove</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Toast notification -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div class="toast @ToastClass" role="alert" aria-live="assertive" aria-atomic="true" style="min-width: 250px; display: @(showToast ? "block" : "none")">
        <div class="toast-header">
            <strong class="me-auto">Notification</strong>
            <button type="button" class="btn-close" @onclick="HideToast"></button>
        </div>
        <div class="toast-body">
            Configuration saved
        </div>
    </div>
</div>



@code {
    [Inject] private IEnumerable<IMessageFormatter>? MessageFormatters { get; set; }
    
    private AppConfiguration? appConfiguration;
    
    private bool showToast = false;
    private const string ToastClass = "bg-success text-white";

    protected override async Task OnInitializedAsync()
    {
        await LoadConfiguration();
    }

    private async Task LoadConfiguration()
    {
        appConfiguration = await ConfigurationProvider.GetDataAsync() ?? new AppConfiguration();

        foreach (var eventHubConfig in appConfiguration.EventHubsConfigs)
        {
            if (eventHubConfig.MessageFormatters.Count == MessageFormatters?.Count())
                continue;

            foreach (var msgFormatter in MessageFormatters ?? Enumerable.Empty<IMessageFormatter>())
            {
                eventHubConfig.MessageFormatters.TryAdd(msgFormatter.Name, false);
            }
        }
    }
    
    private async Task SaveConfiguration()
    {
        if (appConfiguration is null) return;
        await ConfigurationProvider.SaveDataAsync(appConfiguration);

        // show toast
        showToast = true;
        StateHasChanged();

        // hide Toast after 3 seconds
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }
    
    private void AddNewConfig()
    {
        appConfiguration?.EventHubsConfigs.Add(new EventHubConfig
        {
            Title = "New Event Hub",
            ConnectionString = "",
            Name = "",
            UseCheckpoints = false,
            StorageConfig = new BlobConfig { ConnectionString = "", BlobContainerName = "" }
        });
    }
    
    private void RemoveConfig(int index)
    {
        var configId = appConfiguration?.EventHubsConfigs[index].Id;
        if (configId is not null)
            MessagesHistoryService.RemoveAllAsync(configId.Value);
        
        appConfiguration?.EventHubsConfigs.RemoveAt(index);
    }
    
    private void HideToast()
    {
        showToast = false;
        StateHasChanged();
    }
  
    private static void OnGzipCompressionChanged(EventHubConfig eventHub)
    {
        if (eventHub is { UseGzipCompression: false, UseBase64Coding: true })
        {
            eventHub.UseBase64Coding = false;
        }
    }
}