@page "/eventhub/{id:guid}"
@using Application.Utils
@using Domain.Configs
@using Domain.Enums
@using Domain.Helpers
@using Domain.Interfaces.Factories
@using Domain.Interfaces.Services
@using Domain.Models
@using Microsoft.Extensions.Options
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<PageTitle>EventHub - @title</PageTitle>

<h3>@title</h3>


<!-- Send and Receive messages -->
<div class="row">
    <div class="col-6">
        <div class="mb-3">
            <label for="message" class="form-label">Send Event</label>
            <div class="position-relative">
                <textarea class="form-control" id="message" rows="10" style="resize: none;" @bind="messageToSend"></textarea>
                <button class="btn position-absolute top-0 end-0 m-2 p-1 history-icon" @onclick="ToggleMessageHistory">
                    <i class="bi bi-clock-history"></i>
                </button>
                @if (showMessageHistory && messagesHistoryList.Any())
                {
                    <div class="message-history-dropdown">
                        <div class="list-group">
                            @foreach (var message in messagesHistoryList)
                            {
                                <div class="list-group-item list-group-item-action d-flex align-items-center">
                                    <div class="flex-grow-1 message-text" @onclick="() => SelectMessage(message)">
                                        @(message.Length > 50 ? message[..45] + "..." : message)
                                    </div>
                                    <button type="button" class="btn btn-link btn-sm text-danger p-0 ms-2 delete-button" @onclick="() => RemoveFromHistory(message)" @onclick:stopPropagation>
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-6">
        <div class="mb-3">
            <label for="events-list" class="form-label">@($"Received Events - {receivedMessages.TotalAddedCount}")</label>
            @if (receivedMessages.Count == 0)
            {
                <textarea class="form-control" rows="10" readonly style="resize: none;">No messages received yet.</textarea>
            }
            else
            {
                <!-- Events List -->
                <ul id="events-list" class="list-group scrollable-list" @ref="listElement">
                    @foreach (var message in receivedMessages.Index())
                    {
                        var activeClass = selectedIndex.HasValue && selectedIndex.Value == message.Index ? " active" : "";
                        var messageString = message.Item.Message?.Length > 20 
                            ? message.Item.Message[..20] + "..." 
                            : message.Item.Message;
                        <li class=@($"list-group-item{ activeClass }") @onclick="() => OnEventSelected(message.Index)">
                            @($"{receivedMessages.GetVirtualIndex(message.Index) + 1} -> partition {message.Item.PartitionId}, sequenceNumber {message.Item.SequenceNumber}, enqueued {message.Item.EnqueuedTime.ToString("yyyyMMdd HH:mm:ss")}, message: {messageString}")
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

<!-- Send and Receive controls -->
<div class="row">
    <div class="col-6">
        <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
            <button class="btn btn-primary" @onclick="SendMessage">Send</button>
            <div class="d-flex align-items-center gap-2">
                <label for="message-count" class="form-label mb-0">Number of messages</label>
                <input class="form-control form-control-sm" type="number" id="message-count" @bind="numberMessagesToSend" min="1" style="width: 5rem;" />
            </div>
            <div class="d-flex align-items-center gap-2">
                <label for="message-delay" class="form-label mb-0">Delay</label>
                <input class="form-control form-control-sm" type="number" id="message-delay" @bind="delayToSend" min="0" style="width: 5rem;" />
                <select class="form-select form-select-sm" @bind="delayTimeUnit" style="width: 5rem;">
                    <option value="@DelayTimeUnit.Second">@DelayTimeUnit.Second</option>
                    <option value="@DelayTimeUnit.Millisecond">@DelayTimeUnit.Millisecond</option>
                </select>
            </div>
        </div>
    </div>    
    <div class="col-6">
        @if (isProcessing)
        {
            <button class="btn btn-primary" @onclick="StopReceiveMessages">Stop Receive</button>
        }
        else
        {
            <div class="mb-1">
                <row>
                    <button class="me-2 btn btn-primary" type="button" @onclick="StartReceiveMessages">Start Receive</button>
                    @if (receivedMessages.Count > 0)
                    {
                        <button class="btn btn-outline-secondary" type="button" @onclick="ClearMessages">Clear Messages</button>
                    }
                </row>
            </div>
        }
    </div>
</div>

<!-- Event Body -->
<div class="row">
    <div class="col-md-12">
        <textarea class="form-control" rows="10" readonly style="resize: none;" @bind="receivedMessage"></textarea>
    </div>
</div>

<!-- Toast Notification -->
<ToastNotification @ref="toast"/>


@code {
    [Inject] private ILogger<EventHub>? Logger { get; set; }
    [Inject] private IOptionsMonitor<AppConfiguration>? Config { get; set; }
    [Inject] private IMessageProducerFactory? MessageProducerFactory { get; set; }
    [Inject] private IMessageConsumerFactory? MessageConsumerFactory { get; set; }
    [Inject] private IMessageHistory<Guid, List<string>>? MessagesHistoryService { get; set; }
    
    [Parameter] public Guid Id { get; set; }
    
    private ElementReference listElement;
    private ToastNotification? toast;
    private IMessageProducerService? messageProducer;
    private IMessageConsumerService? messageConsumer;

    private string? title;
    private string? messageToSend;
    private uint numberMessagesToSend = 1;
    private int delayToSend;
    private string delayTimeUnit = DelayTimeUnit.Second;
    private bool showMessageHistory;
    private List<string> messagesHistoryList = [];
    private const byte MAX_HISTORY_MESSAGES = 10;
    private string? receivedMessage;
    private bool isProcessing;
    private int? selectedIndex;
    private readonly CircularBuffer<EventHubMessage> receivedMessages = new(50);
    private readonly ResettableCts receiverCts = new();
    private readonly ResettableCts delayedSenderCts = new();


    protected override void OnInitialized()
    {
        var ehConfig = Config?.CurrentValue.EventHubsConfigs.First(w => w.Id == Id);
        title = ehConfig?.Title ?? "unknown event hub";
    }

    private void InitializeMessageProducer()
    {
        try
        {
            messageProducer ??= MessageProducerFactory?.CreateProducerService(Id);
        }
        catch (Exception ex)
        {
            DisplayErrorMessage(ex, "Error creating message producer");
        }
    }
    
    private void InitializeMessageConsumer()
    {
        try
        {
            messageConsumer ??= MessageConsumerFactory?.CreateConsumer(Id);
        }
        catch (Exception ex)
        {
            DisplayErrorMessage(ex, "Error creating message consumer");
        }
    }

    
    private async Task SendMessage()
    {
        InitializeMessageProducer();

        if (messageProducer is null)
        {
            Logger?.LogWarning("Message Producer is null, cannot send message");
            return;
        }
        
        try
        {
            var delayTimeSpan = delayTimeUnit == DelayTimeUnit.Millisecond
                ? TimeSpan.FromMilliseconds(delayToSend) 
                : TimeSpan.FromSeconds(delayToSend);
            
            await messageProducer
                .SendMessagesAsync(
                    messageToSend, 
                    numberMessagesToSend, 
                    delayTimeSpan,
                    delayedSenderCts.Token
                ); 
            
            if (!string.IsNullOrWhiteSpace(messageToSend) && !messagesHistoryList.Contains(messageToSend))
            {
                if (MAX_HISTORY_MESSAGES > 0)
                {
                    while (messagesHistoryList.Count >= MAX_HISTORY_MESSAGES)
                    {
                        await RemoveFromHistory(messagesHistoryList[0]);
                    }
                }
                
                messagesHistoryList.Add(messageToSend);
                if (MessagesHistoryService is not null) 
                    await MessagesHistoryService.AddMessageAsync(Id, messageToSend).ConfigureAwait(false);
            }
            
            _ = toast?.ShowToast("Messages sent successfully").ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            DisplayErrorMessage(ex, "Error sending message");
        }
        
        numberMessagesToSend = 1;
        delayToSend = 0;
    }

    private async Task ToggleMessageHistory()
    {
        showMessageHistory = !showMessageHistory;

        if (showMessageHistory && messagesHistoryList.Count == 0 && MessagesHistoryService is not null)
        {
            var history = await MessagesHistoryService.GetHistoryAsync(Id).ConfigureAwait(false);
            messagesHistoryList.Clear();
            messagesHistoryList.AddRange(history);
        }
        
        if (showMessageHistory && messagesHistoryList.Count == 0)
            showMessageHistory = false;
        
        await InvokeAsync(StateHasChanged);
    }

    private void SelectMessage(string message)
    {
        messageToSend = message;
        showMessageHistory = false;
    }

    private async Task RemoveFromHistory(string message)
    {
        messagesHistoryList.Remove(message);
        if (MessagesHistoryService is not null)
            await MessagesHistoryService.RemoveMessageAsync(Id, message);
        
        if (!messagesHistoryList.Any())
        {
            showMessageHistory = false;
        }
    }
    
    
    private async Task StartReceiveMessages()
    {
        try
        {
            InitializeMessageConsumer();
            if (messageConsumer is null)
            {
                Logger?.LogWarning("Message Consumer is null, cannot start receive messages");
                return;
            }
            
            isProcessing = !isProcessing;
            
            Logger?.LogInformation("Start Receive Messages");
            
            receiverCts.Reset();

            try
            {
                await foreach (var message in  messageConsumer.StartReceiveMessageAsync(receiverCts.Token))
                {
                    if (!isProcessing)
                        return;
                    
                    receivedMessages.Add(message);
                    receivedMessage = receivedMessages[^1].Message;
                    
                    await InvokeAsync(StateHasChanged);
                    
                    await ScrollToBottom();
                }
            }
            catch (Exception ex) when(ex is not OperationCanceledException)
            {
                DisplayErrorMessage(ex, "Error while receiving messages");
            }
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private async Task StopReceiveMessages()
    {
        receiverCts.Cancel();
        isProcessing = !isProcessing;
        
        Logger?.LogInformation("Stop Receive Messages");
        
        if (messageConsumer is not null)
            await messageConsumer.StopReceiveMessageAsync();
    }
    
    
    private void ClearMessages()
    {
        receivedMessages.Clear();
    }
    
    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("scrollToBottom", listElement);
    }

    private void OnEventSelected(int index)
    {
        selectedIndex = index;
        receivedMessage = receivedMessages[index].Message;
    }

    private void DisplayErrorMessage(Exception ex, string infoMessage)
    {
        Logger?.LogError(ex, "{InfoMessage}: {Message}", infoMessage, ex.Message);
        _ = toast?.ShowToast($"{infoMessage}: {ex.Message}", ToastType.Error, TimeSpan.FromSeconds(10));
    }
    

    public async ValueTask DisposeAsync()
    {
        // Cancel any pending operations first
        receiverCts.Cancel();
        delayedSenderCts.Cancel();
        
        // Dispose of services
        if (messageProducer is not null)
            await messageProducer.DisposeAsync();
        
        if (messageConsumer is not null)
            await messageConsumer.DisposeAsync();
        
        // Dispose of cancellation tokens
        receiverCts.Dispose();
        delayedSenderCts.Dispose();
        
        // Clear collections
        receivedMessages.Clear();
        messagesHistoryList.Clear();
        
        GC.SuppressFinalize(this);
    }
}